#
# Project Kimchi
#
# Copyright IBM Corp, 2014-2016
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA

import unittest
from cherrypy.lib.reprconf import Parser

from wok.config import CACHEEXPIRES
from wok.config import Paths, PluginPaths

from wok.plugins.kimchi.config import get_screenshot_path
from wok.plugins.kimchi.config import get_virtviewerfiles_path
from wok.plugins.kimchi.config import KimchiConfig, KimchiPaths


get_prefix = None


def setUpModule():
    global get_prefix
    get_prefix = Paths.get_prefix


def tearDownModule():
    Paths.get_prefix = KimchiPaths.get_prefix = get_prefix


class ConfigTests(unittest.TestCase):
    def assertInstalledPath(self, actual, expected):
        if '@pkgdatadir@' != '/usr/share/kimchi':
            usr_local = '/usr/local'
            if not expected.startswith('/usr'):
                expected = usr_local + expected
        self.assertEquals(actual, expected)

    def test_installed_plugin_paths(self):
        KimchiPaths.get_prefix = lambda self: '@datadir@/wok'
        paths = KimchiPaths()
        self.assertInstalledPath(paths.conf_dir, '/etc/wok/plugins.d')
        self.assertInstalledPath(paths.conf_file,
                                 '/etc/wok/plugins.d/kimchi.conf')
        self.assertInstalledPath(paths.src_dir, '@wokdir@/plugins/kimchi')
        self.assertInstalledPath(paths.ui_dir,
                                 '@datadir@/wok/plugins/kimchi/ui')
        self.assertInstalledPath(paths.mo_dir, '@prefix@/share/locale')

    def test_uninstalled_plugin_paths(self):
        paths = KimchiPaths()
        prefix = paths.prefix
        self.assertEquals(paths.conf_dir, '%s/src/wok/plugins/kimchi' % prefix)
        self.assertEquals(paths.conf_file,
                          '%s/src/wok/plugins/kimchi/kimchi.conf' % prefix)
        self.assertEquals(paths.src_dir, '%s/src/wok/plugins/kimchi' % prefix)
        self.assertEquals(paths.ui_dir,
                          '%s/src/wok/plugins/kimchi/ui' % prefix)
        self.assertEquals(paths.mo_dir,
                          '%s/src/wok/plugins/kimchi/mo' % prefix)

    def test_kimchi_config(self):
        KimchiPaths.get_prefix = PluginPaths.get_prefix = get_prefix
        paths = KimchiPaths()
        pluginPrefix = paths.add_prefix(paths.plugin_dir)
        configObj = {
            'wok': {
                'enable': True
            },
            'kimchi': {
                'federation': False,
                'create_iso_pool': True,
            },
            '/': {
                'tools.trailing_slash.on': False,
                'request.methods_with_bodies': ('POST', 'PUT'),
                'tools.nocache.on': True,
                'tools.proxy.on': True,
                'tools.sessions.on': True,
                'tools.sessions.name': 'wok',
                'tools.sessions.secure': True,
                'tools.sessions.httponly': True,
                'tools.sessions.locking': 'explicit',
                'tools.sessions.storage_type': 'ram'
            },
            '/novnc': {
                'tools.wokauth.on': True,
                'tools.nocache.on': True,
                'tools.staticdir.dir': paths.novnc_dir,
                'tools.staticdir.on': True
            },
            '/spice-html5': {
                'tools.wokauth.on': True,
                'tools.nocache.on': True,
                'tools.staticdir.dir': paths.spice_dir,
                'tools.staticdir.on': True
            },
            '/spice_auto.html': {
                'tools.wokauth.on': True,
                'tools.nocache.on': True,
                'tools.staticfile.on': True,
                'tools.staticfile.filename': paths.spice_file,
            },
            '/spice-html5/spice.css': {
                'tools.wokauth.on': True,
                'tools.nocache.on': True,
                'tools.staticfile.on': True,
                'tools.staticfile.filename': paths.spice_css_file,
            },
            '/help': {
                'tools.nocache.on': True,
                'tools.staticdir.dir': '%s/ui/pages/help' % pluginPrefix,
                'tools.staticdir.on': True
            },
            '/js': {
                'tools.wokauth.on': False,
                'tools.nocache.on': False,
                'tools.staticdir.dir': '%s/ui/js' % pluginPrefix,
                'tools.expires.on': True,
                'tools.expires.secs': CACHEEXPIRES,
                'tools.staticdir.on': True
            },
            '/css': {
                'tools.wokauth.on': False,
                'tools.nocache.on': False,
                'tools.staticdir.dir': '%s/ui/css' % pluginPrefix,
                'tools.expires.on': True,
                'tools.expires.secs': CACHEEXPIRES,
                'tools.staticdir.on': True
            },
            '/images': {
                'tools.wokauth.on': False,
                'tools.nocache.on': False,
                'tools.staticdir.dir': '%s/ui/images' % pluginPrefix,
                'tools.staticdir.on': True
            },
            '/data/screenshots': {
                'tools.nocache.on': False,
                'tools.staticdir.dir': get_screenshot_path(),
                'tools.staticdir.on': True
            },
            '/data/virtviewerfiles': {
                'tools.nocache.on': False,
                'tools.staticdir.dir': get_virtviewerfiles_path(),
                'tools.staticdir.on': True
            },
            '/ui/config/tab-ext.xml': {
                'tools.nocache.on': True,
                'tools.staticfile.on': True,
                'tools.staticfile.filename': '%s/ui/config/tab-ext.xml' %
                pluginPrefix,
            },
            '/serial': {
                'tools.nocache.on': True,
                'tools.wokauth.on': True,
                'tools.staticdir.dir': paths.serial_dir,
                'tools.staticdir.on': True
            },
        }

        kimchi_config = Parser().dict_from_file(KimchiPaths().conf_file)
        kimchi_config.update(KimchiConfig())
        self.assertEquals(kimchi_config, configObj)
